{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_SEARCHBAR_DATA, SEARCHBAR_LOADING_END, SEARCHBAR_LOADING_START } from \"../types\";\nexport const initialSearchbarState = {\n  isLoading: false,\n  filterProducts: []\n};\nexport const searchReducer = (state, action) => {\n  switch (action.type) {\n    case SEARCHBAR_LOADING_START:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: true\n      });\n\n    case SEARCHBAR_LOADING_END:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: false\n      });\n\n    case GET_SEARCHBAR_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filterProducts: payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/media/reasat-rafio/Local dowg/programming/PRODUCTION/technoLuxBD/src/store/reducers/searchbarReducer.tsx"],"names":["GET_SEARCHBAR_DATA","SEARCHBAR_LOADING_END","SEARCHBAR_LOADING_START","initialSearchbarState","isLoading","filterProducts","searchReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SACGA,kBADH,EAEGC,qBAFH,EAGGC,uBAHH,QAIO,UAJP;AAWA,OAAO,MAAMC,qBAAqB,GAAG;AAClCC,EAAAA,SAAS,EAAE,KADuB;AAElCC,EAAAA,cAAc,EAAE;AAFkB,CAA9B;AAIP,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAaC,MAAb,KAAgC;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACG,SAAKP,uBAAL;AACG,6CAAYK,KAAZ;AAAmBH,QAAAA,SAAS,EAAE;AAA9B;;AACH,SAAKH,qBAAL;AACG,6CAAYM,KAAZ;AAAmBH,QAAAA,SAAS,EAAE;AAA9B;;AACH,SAAKJ,kBAAL;AACG,6CAAYO,KAAZ;AAAmBF,QAAAA,cAAc,EAAEK;AAAnC;;AACH;AACG,aAAOH,KAAP;AARN;AAUF,CAXM","sourcesContent":["import {\n   GET_SEARCHBAR_DATA,\n   SEARCHBAR_LOADING_END,\n   SEARCHBAR_LOADING_START,\n} from \"../types\";\n\ntype Action = {\n   type: string;\n   payload: any;\n};\n\nexport const initialSearchbarState = {\n   isLoading: false,\n   filterProducts: [],\n};\nexport const searchReducer = (state: any, action: Action) => {\n   switch (action.type) {\n      case SEARCHBAR_LOADING_START:\n         return { ...state, isLoading: true };\n      case SEARCHBAR_LOADING_END:\n         return { ...state, isLoading: false };\n      case GET_SEARCHBAR_DATA:\n         return { ...state, filterProducts: payload };\n      default:\n         return state;\n   }\n};\n"]},"metadata":{},"sourceType":"module"}