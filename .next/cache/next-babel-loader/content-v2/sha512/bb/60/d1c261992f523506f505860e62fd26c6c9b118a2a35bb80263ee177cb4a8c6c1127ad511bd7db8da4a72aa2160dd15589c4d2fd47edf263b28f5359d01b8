{"ast":null,"code":"import connectDB from \"../../../utils/connectDB\";\nimport User from \"../../../Models/userModel\";\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await RegisterUser(req, res);\n      break;\n\n    default:\n      break;\n  }\n});\n\nconst RegisterUser = async (req, res) => {\n  try {\n    //  Getting the data from request body\n    const {\n      username,\n      email,\n      password\n    } = req.body; // Checking if this email used before or not\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(403).json({\n        success: false,\n        error: \"This email is already registered\"\n      });\n    } // Creating a new User\n\n\n    const newUser = await User.create({\n      username,\n      email,\n      password\n    }); // If registration failed\n\n    if (!newUser) {\n      return res.status(403).json({\n        success: false,\n        error: \"Something went wrong\"\n      });\n    } // Returing a success response\n\n\n    res.status(201).json({\n      success: true,\n      data: {\n        newUser\n      }\n    });\n  } catch (error) {\n    if (error.code === 11000) {\n      return res.status(403).json({\n        success: false,\n        error: \"This user is already exist\"\n      });\n    }\n\n    res.status(403).json({\n      success: false,\n      error: error.message\n    });\n  }\n};","map":{"version":3,"sources":["/media/reasat-rafio/Local dowg/programming/PRODUCTION/technoLuxBD/src/pages/api/auth/register.ts"],"names":["connectDB","User","req","res","method","RegisterUser","username","email","password","body","user","findOne","status","json","success","error","newUser","create","data","code","message"],"mappings":"AACA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AAEAD,SAAS;AAET,gBAAe,OAAOE,GAAP,EAA4BC,GAA5B,KAAqD;AACjE,UAAQD,GAAG,CAACE,MAAZ;AACG,SAAK,MAAL;AACG,YAAMC,YAAY,CAACH,GAAD,EAAMC,GAAN,CAAlB;AACA;;AAEH;AACG;AANN;AAQF,CATD;;AAWA,MAAME,YAAY,GAAG,OAAOH,GAAP,EAA4BC,GAA5B,KAAqD;AACvE,MAAI;AACD;AACA,UAAM;AAAEG,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,QAAgCN,GAAG,CAACO,IAA1C,CAFC,CAID;;AACA,UAAMC,IAAI,GAAG,MAAMT,IAAI,CAACU,OAAL,CAAa;AAAEJ,MAAAA;AAAF,KAAb,CAAnB;;AACA,QAAIG,IAAJ,EAAU;AACP,aAAOP,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACzBC,QAAAA,OAAO,EAAE,KADgB;AAEzBC,QAAAA,KAAK,EAAE;AAFkB,OAArB,CAAP;AAIF,KAXA,CAaD;;;AACA,UAAMC,OAAO,GAAG,MAAMf,IAAI,CAACgB,MAAL,CAAY;AAC/BX,MAAAA,QAD+B;AAE/BC,MAAAA,KAF+B;AAG/BC,MAAAA;AAH+B,KAAZ,CAAtB,CAdC,CAoBD;;AACA,QAAI,CAACQ,OAAL,EAAc;AACX,aAAOb,GAAG,CACNS,MADG,CACI,GADJ,EAEHC,IAFG,CAEE;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OAFF,CAAP;AAGF,KAzBA,CA2BD;;;AACAZ,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBI,MAAAA,IAAI,EAAE;AAAEF,QAAAA;AAAF;AAAvB,KAArB;AACF,GA7BD,CA6BE,OAAOD,KAAP,EAAc;AACb,QAAIA,KAAK,CAACI,IAAN,KAAe,KAAnB,EAA0B;AACvB,aAAOhB,GAAG,CACNS,MADG,CACI,GADJ,EAEHC,IAFG,CAEE;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OAFF,CAAP;AAGF;;AAEDZ,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,KAAK,EAAEA,KAAK,CAACK;AAA/B,KAArB;AACF;AACH,CAvCD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport connectDB from \"../../../utils/connectDB\";\nimport User from \"../../../Models/userModel\";\n\nconnectDB();\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n   switch (req.method) {\n      case \"POST\":\n         await RegisterUser(req, res);\n         break;\n\n      default:\n         break;\n   }\n};\n\nconst RegisterUser = async (req: NextApiRequest, res: NextApiResponse) => {\n   try {\n      //  Getting the data from request body\n      const { username, email, password } = req.body;\n\n      // Checking if this email used before or not\n      const user = await User.findOne({ email });\n      if (user) {\n         return res.status(403).json({\n            success: false,\n            error: \"This email is already registered\",\n         });\n      }\n\n      // Creating a new User\n      const newUser = await User.create({\n         username,\n         email,\n         password,\n      });\n\n      // If registration failed\n      if (!newUser) {\n         return res\n            .status(403)\n            .json({ success: false, error: \"Something went wrong\" });\n      }\n\n      // Returing a success response\n      res.status(201).json({ success: true, data: { newUser } });\n   } catch (error) {\n      if (error.code === 11000) {\n         return res\n            .status(403)\n            .json({ success: false, error: \"This user is already exist\" });\n      }\n\n      res.status(403).json({ success: false, error: error.message });\n   }\n};\n"]},"metadata":{},"sourceType":"module"}