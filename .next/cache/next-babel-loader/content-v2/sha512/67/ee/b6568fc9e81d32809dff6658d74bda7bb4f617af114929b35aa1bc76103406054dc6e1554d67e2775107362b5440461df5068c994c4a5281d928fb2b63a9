{"ast":null,"code":"import { Schema, models, model } from \"mongoose\";\nimport bcrypt from \"bcrypt\";\nconst userSchema = new Schema({\n  username: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    lowercase: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  role: {\n    type: String,\n    default: \"user\"\n  }\n}, {\n  timestamps: true\n}); // This function will fire before user Regiter\n\nuserSchema.pre(\"save\", async function (next) {\n  try {\n    const salt = await bcrypt.genSalt();\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error) {\n    console.log(error);\n  }\n});\nlet DataSet = models.EmailUser || model(\"EmailUser\", userSchema);\nexport default DataSet;","map":{"version":3,"sources":["/media/reasat-rafio/Local dowg/programming/PRODUCTION/technoLuxBD/src/Models/userModel.ts"],"names":["Schema","models","model","bcrypt","userSchema","username","type","String","required","email","unique","trim","lowercase","password","role","default","timestamps","pre","next","salt","genSalt","hash","error","console","log","DataSet","EmailUser"],"mappings":"AAAA,SAAmBA,MAAnB,EAA2BC,MAA3B,EAAmCC,KAAnC,QAAuD,UAAvD;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAaA,MAAMC,UAAU,GAAG,IAAIJ,MAAJ,CAChB;AACGK,EAAAA,QAAQ,EAAE;AACPC,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE;AAFH,GADb;AAKGC,EAAAA,KAAK,EAAE;AACJH,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE,IAFN;AAGJE,IAAAA,MAAM,EAAE,IAHJ;AAIJC,IAAAA,IAAI,EAAE,IAJF;AAKJC,IAAAA,SAAS,EAAE;AALP,GALV;AAYGC,EAAAA,QAAQ,EAAE;AACPP,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE;AAFH,GAZb;AAgBGM,EAAAA,IAAI,EAAE;AACHR,IAAAA,IAAI,EAAEC,MADH;AAEHQ,IAAAA,OAAO,EAAE;AAFN;AAhBT,CADgB,EAsBhB;AACGC,EAAAA,UAAU,EAAE;AADf,CAtBgB,CAAnB,C,CA2BA;;AACAZ,UAAU,CAACa,GAAX,CAAoB,MAApB,EAA4B,gBAAsBC,IAAtB,EAA4B;AACrD,MAAI;AACD,UAAMC,IAAI,GAAG,MAAMhB,MAAM,CAACiB,OAAP,EAAnB;AACA,SAAKP,QAAL,GAAgB,MAAMV,MAAM,CAACkB,IAAP,CAAY,KAAKR,QAAjB,EAA2BM,IAA3B,CAAtB;AACAD,IAAAA,IAAI;AACN,GAJD,CAIE,OAAOI,KAAP,EAAc;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACF;AACH,CARD;AAUA,IAAIG,OAAO,GACRxB,MAAM,CAACyB,SAAP,IAAoBxB,KAAK,CAAmB,WAAnB,EAAgCE,UAAhC,CAD5B;AAGA,eAAeqB,OAAf","sourcesContent":["import { Document, Schema, models, model, Model } from \"mongoose\";\nimport bcrypt from \"bcrypt\";\n\nexport interface SavedUserDocument extends Document {\n   email: string;\n   password: string;\n   name?: string;\n   loginUser?: () => string;\n}\n\ninterface IUserModel extends Model<SavedUserDocument> {\n   loginUser(password: string, email: string): string;\n}\n\nconst userSchema = new Schema(\n   {\n      username: {\n         type: String,\n         required: true,\n      },\n      email: {\n         type: String,\n         required: true,\n         unique: true,\n         trim: true,\n         lowercase: true,\n      },\n      password: {\n         type: String,\n         required: true,\n      },\n      role: {\n         type: String,\n         default: \"user\",\n      },\n   },\n   {\n      timestamps: true,\n   }\n);\n\n// This function will fire before user Regiter\nuserSchema.pre<any>(\"save\", async function (this, next) {\n   try {\n      const salt = await bcrypt.genSalt();\n      this.password = await bcrypt.hash(this.password, salt);\n      next();\n   } catch (error) {\n      console.log(error);\n   }\n});\n\nlet DataSet =\n   models.EmailUser || model<IUserModel | any>(\"EmailUser\", userSchema);\n\nexport default DataSet;\n"]},"metadata":{},"sourceType":"module"}